@page "/grinder"

@using EspressoJournal.Data
@using Radzen
@using Radzen.Blazor
@using Microsoft.AspNetCore.Components.Web
@using EspressoJournal.Models

<h3>Grinder</h3>

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<RadzenDataGrid @ref="grinderGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5"
    AllowSorting="true" EditMode="@editMode" Data="@grinders" TItem="Grinder" RowUpdate="@OnUpdateRow"
    RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
    <HeaderTemplate>
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New Grinder" Click="@InsertRow"
            Disabled="@(editMode == DataGridEditMode.Single && grindersToInsert.Count() > 0)" />
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Property="GrinderID" Title="Grinder ID" Width="120px" Frozen="true" />
    
         <RadzenDataGridColumn Property="Grinder.BrandName" Title="Brand Name">
            <EditTemplate Context="grinder">
                <RadzenTextBox @bind-Value="grinder.BrandName" Style="width:200px; display: block" Name="BrandName"
                    aria-label="Enter grinder brand name" />
                <RadzenRequiredValidator Text="BrandName is required" Component="BrandName" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>

@code {
    RadzenDataGrid<GrinderModel> grinderGrid;
    DataGridEditMode editMode = DataGridEditMode.Single;
    IEnumerable<GrinderModel> grinders;
    List<GrinderModel> grindersToInsert = new List<GrinderModel>();

    private void InsertRow()
    {
        var newGrinder = new GrinderModel();
        grindersToInsert.Add(newGrinder);
        grinderGrid.InsertRow(newGrinder);
    }

    private void OnUpdateRow(GrinderModel grinder)
    {
        // Logic to handle the row update
        // For example, save the updated grinder to the database
        Console.WriteLine($"Updated Grinder: {grinder.BrandName}");
    }

    private void OnCreateRow(GrinderModel grinder)
    {
        // Logic to handle the row creation
    }

    private void EditRow(GrinderModel grinder)
    {
        grinderGrid.EditRow(grinder);
    }

    @* private void DeleteRow(Grinder grinder)
    {
        grinderGrid.DeleteRow(grinder);
    } *@

    private void SaveRow(GrinderModel grinder)
    {
        grinderGrid.UpdateRow(grinder);
    }

    private void CancelEdit(GrinderModel grinder)
    {
        grinderGrid.CancelEditRow(grinder);
    }

    private void Reset()
    {
        // Logic to reset the grid
    }
}
