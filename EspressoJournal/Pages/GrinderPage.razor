@page "/grinder"

@using EspressoJournal.Data
@using Radzen
@using Radzen.Blazor
@using Microsoft.AspNetCore.Components.Web
@using EspressoJournal.Models
@using System.Net.Http.Json
@inject IHttpClientFactory ClientFactory

<h3>Grinder</h3>

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<RadzenDataGrid @ref="grinderGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5"
    AllowSorting="true" EditMode="@editMode" Data="@grinders" TItem="GrinderModel" RowUpdate="@OnUpdateRow"
    RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
    <HeaderTemplate>
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New Grinder" Click="@InsertRow"
            Disabled="@(editMode == DataGridEditMode.Single && grindersToInsert.Count() > 0)" />
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Property="GrinderModel.ID" Title="Grinder ID" Width="120px" Frozen="true" />

        <RadzenDataGridColumn Property="GrinderModel.BrandName" Title="Brand Name">
            <EditTemplate Context="grinder">
                <RadzenTextBox @bind-Value="grinder.BrandName" Style="width:200px; display: block" Name="BrandName"
                    aria-label="Enter grinder brand name" />
                <RadzenRequiredValidator Text="BrandName is required" Component="BrandName" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Property="Grinder.ModelName" Title="Model Name">
            <EditTemplate Context="grinder">
                <RadzenTextBox @bind-Value="grinder.ModelName" Style="width:200px; display: block" Name="ModelName"
                    aria-label="Enter grinder model name" />
                <RadzenRequiredValidator Text="ModelName is required" Component="ModelName" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Context="grinder" Filterable="false" Sortable="false" TextAlign="TextAlign.Right"
            Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="grinder">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                    Size="ButtonSize.Medium" Click="@(args => EditRow(grinder))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                    Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                    Click="@(args => DeleteRow(grinder))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="grinder">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat"
                    Size="ButtonSize.Medium" Click="@((args) => SaveRow(grinder))" aria-label="Save">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                    Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(grinder))"
                    aria-label="Cancel">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                    Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                    Click="@(args => DeleteRow(grinder))" aria-label="Delete">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    RadzenDataGrid<GrinderModel> grinderGrid;
    DataGridEditMode editMode = DataGridEditMode.Single;
    IEnumerable<GrinderModel> grinders;
    List<GrinderModel> grindersToInsert = new List<GrinderModel>();

    List<GrinderModel> grindersToUpdate = new List<GrinderModel>();

    private void Reset()
    {
        grindersToInsert.Clear();
        grindersToUpdate.Clear();
    }

    private void Reset(GrinderModel grinder)
    {
        grindersToInsert.Remove(grinder);
        grindersToUpdate.Remove(grinder);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var client = ClientFactory.CreateClient("GrinderApiClient");
        grinders = await client.GetFromJsonAsync<IEnumerable<GrinderModel>>("grinder");
    }

    private async Task EditRow(GrinderModel grinder)
    {
        if (editMode == DataGridEditMode.Single && grindersToInsert.Count() > 0)
        {
            Reset();
        }

        grindersToUpdate.Add(grinder);
        await grinderGrid.EditRow(grinder);
    }

     private void OnUpdateRow(GrinderModel grinder)
    {
        Reset(grinder);

        @* dbContext.Update(grinder);

        dbContext.SaveChanges(); *@
    }

     private void SaveRow(GrinderModel grinder)
    {
        grinderGrid.UpdateRow(grinder);
    }

    private void CancelEdit(GrinderModel grinder)
    {
        Reset(grinder);

        grinderGrid.CancelEditRow(grinder);

        @* var orderEntry = dbContext.Entry(order);
        if (orderEntry.State == EntityState.Modified)
        {
            orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
            orderEntry.State = EntityState.Unchanged;
        } *@
    }

    private async Task DeleteRow(GrinderModel grinder)
    {
        Reset(grinder);
        
        if (grinders.Contains(grinder))
        {
            @* dbContext.Remove<GrinderModel>(grinder);

            dbContext.SaveChanges(); *@

            await grinderGrid.Reload();
        }
        else
        {
            grinderGrid.CancelEditRow(grinder);
            await grinderGrid.Reload();
        }
    }

    private async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var newGrinder = new GrinderModel();
        grindersToInsert.Add(newGrinder);
        await grinderGrid.InsertRow(newGrinder);
    }

    private void OnCreateRow(GrinderModel grinder)
    {
        // Logic to handle the row creation
        @* dbContext.Add(grinder);

        dbContext.SaveChanges(); *@

        grindersToInsert.Remove(grinder);
    }
}
